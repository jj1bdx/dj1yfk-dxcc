#!/usr/bin/env perl

# dxcc - determining the DXCC country of a callsign
# modified by Kenji Rikitake, JJ1BDX.
# See https://github.com/jj1bdx/dj1yfk-dxcc/ for the details.
# (c) 2022 Kenji Rikitake, JJ1BDX
#
# Copyright (C) 2007-2019  Fabian Kurz, DJ1YFK
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

use strict;
use warnings;
use POSIX;
use File::Basename;

# Where the script resides
my $scriptdirname = dirname(__FILE__);

my $version = 'VERSION';
my $credits = "dxcc modified by Kenji Rikitake, JJ1BDX.
See https://github.com/jj1bdx/dj1yfk-dxcc/ for the details.
(c) 2022 Kenji Rikitake, JJ1BDX 

Originally from:
dxcc 20191204 (c) Fabian Kurz, DJ1YFK.  http://fkurz.net/ham/dxcc.html

Determines the ARRL DXCC entity of a ham radio callsign, based on the cty.dat
country file by Jim Reisert, AD1C (http://country-files.com/). 

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.";

my %fullcalls;    # hash of arrays  fullcalls -> dxcc data
my %prefixes;     # hash of arrays  prefixes -> dxcc data
my @dxcc;

my %prefix_to_entitycode = (
    "1A"    => 246,
    "1S"    => 247,
    "3A"    => 260,
    "3B6"   => 4,
    "3B8"   => 165,
    "3B9"   => 207,
    "3C"    => 49,
    "3C0"   => 195,
    "3D2"   => 176,
    "3D2/c" => 489,
    "3D2/r" => 460,
    "3DA"   => 468,
    "3V"    => 474,
    "3W"    => 293,
    "3X"    => 107,
    "3Y/b"  => 24,
    "3Y/p"  => 199,
    "4J"    => 18,
    "4L"    => 75,
    "4O"    => 514,
    "4S"    => 315,
    "4U1I"  => 117,
    "4U1U"  => 289,
    "4W"    => 511,
    "4X"    => 336,
    "5A"    => 436,
    "5B"    => 215,
    "5H"    => 470,
    "5N"    => 450,
    "5R"    => 438,
    "5T"    => 444,
    "5U"    => 187,
    "5V"    => 483,
    "5W"    => 190,
    "5X"    => 286,
    "5Z"    => 430,
    "6W"    => 456,
    "6Y"    => 82,
    "7O"    => 492,
    "7P"    => 432,
    "7Q"    => 440,
    "7X"    => 400,
    "8P"    => 62,
    "8Q"    => 159,
    "8R"    => 129,
    "9A"    => 497,
    "9G"    => 424,
    "9H"    => 257,
    "9J"    => 482,
    "9K"    => 348,
    "9L"    => 458,
    "9M2"   => 299,
    "9M6"   => 46,
    "9N"    => 369,
    "9Q"    => 414,
    "9U"    => 404,
    "9V"    => 381,
    "9X"    => 454,
    "9Y"    => 90,
    "A2"    => 402,
    "A3"    => 160,
    "A4"    => 370,
    "A5"    => 306,
    "A6"    => 391,
    "A7"    => 376,
    "A9"    => 304,
    "AP"    => 372,
    "BS7"   => 506,
    "BV"    => 386,
    "BV9P"  => 505,
    "BY"    => 318,
    "C2"    => 157,
    "C3"    => 203,
    "C5"    => 422,
    "C6"    => 60,
    "C9"    => 181,
    "CE"    => 112,
    "CE0X"  => 217,
    "CE0Y"  => 47,
    "CE0Z"  => 125,
    "CE9"   => 13,
    "CM"    => 70,
    "CN"    => 446,
    "CP"    => 104,
    "CT"    => 272,
    "CT3"   => 256,
    "CU"    => 149,
    "CX"    => 144,
    "CY0"   => 211,
    "CY9"   => 252,
    "D2"    => 401,
    "D4"    => 409,
    "D6"    => 411,
    "DL"    => 230,
    "DU"    => 375,
    "E3"    => 51,
    "E4"    => 510,
    "E5/n"  => 191,
    "E5/s"  => 234,
    "E6"    => 188,
    "E7"    => 501,
    "EA"    => 281,
    "EA6"   => 21,
    "EA8"   => 29,
    "EA9"   => 32,
    "EI"    => 245,
    "EK"    => 14,
    "EL"    => 434,
    "EP"    => 330,
    "ER"    => 179,
    "ES"    => 52,
    "ET"    => 53,
    "EU"    => 27,
    "EX"    => 135,
    "EY"    => 262,
    "EZ"    => 280,
    "F"     => 227,
    "FG"    => 79,
    "FH"    => 169,
    "FJ"    => 516,
    "FK"    => 162,
    "FK/c"  => 512,
    "FM"    => 84,
    "FO"    => 175,
    "FO/a"  => 508,
    "FO/c"  => 36,
    "FO/m"  => 509,
    "FP"    => 277,
    "FR"    => 453,
    "FS"    => 213,
    "FT/g"  => 99,
    "FT/j"  => 124,
    "FT/t"  => 276,
    "FT/w"  => 41,
    "FT/x"  => 131,
    "FT/z"  => 10,
    "FW"    => 298,
    "FY"    => 63,
    "G"     => 223,
    "GD"    => 114,
    "GI"    => 265,
    "GJ"    => 122,
    "GM"    => 279,
    "GU"    => 106,
    "GW"    => 294,
    "H4"    => 185,
    "H40"   => 507,
    "HA"    => 239,
    "HB"    => 287,
    "HB0"   => 251,
    "HC"    => 120,
    "HC8"   => 71,
    "HH"    => 78,
    "HI"    => 72,
    "HK"    => 116,
    "HK0/a" => 216,
    "HK0/m" => 161,
    "HL"    => 137,
    "HP"    => 88,
    "HR"    => 80,
    "HS"    => 387,
    "HV"    => 295,
    "HZ"    => 378,
    "I"     => 248,
    "IS"    => 225,
    "J2"    => 382,
    "J3"    => 77,
    "J5"    => 109,
    "J6"    => 97,
    "J7"    => 95,
    "J8"    => 98,
    "JA"    => 339,
    "JD/m"  => 177,
    "JD/o"  => 192,
    "JT"    => 363,
    "JW"    => 259,
    "JX"    => 118,
    "JY"    => 342,
    "K"     => 291,
    "KG4"   => 105,
    "KH0"   => 166,
    "KH1"   => 20,
    "KH2"   => 103,
    "KH3"   => 123,
    "KH4"   => 174,
    "KH5"   => 197,
    "KH6"   => 110,
    "KH7K"  => 138,
    "KH8"   => 9,
    "KH8/s" => 515,
    "KH9"   => 297,
    "KL"    => 6,
    "KP1"   => 182,
    "KP2"   => 285,
    "KP4"   => 202,
    "KP5"   => 43,
    "LA"    => 266,
    "LU"    => 100,
    "LX"    => 254,
    "LY"    => 146,
    "LZ"    => 212,
    "OA"    => 136,
    "OD"    => 354,
    "OE"    => 206,
    "OH"    => 224,
    "OH0"   => 5,
    "OJ0"   => 167,
    "OK"    => 503,
    "OM"    => 504,
    "ON"    => 209,
    "OX"    => 237,
    "OY"    => 222,
    "OZ"    => 221,
    "P2"    => 163,
    "P4"    => 91,
    "P5"    => 344,
    "PA"    => 263,
    "PJ2"   => 517,
    "PJ4"   => 520,
    "PJ5"   => 519,
    "PJ7"   => 518,
    "PY"    => 108,
    "PY0F"  => 56,
    "PY0S"  => 253,
    "PY0T"  => 273,
    "PZ"    => 140,
    "R1FJ"  => 61,
    "S0"    => 302,
    "S2"    => 305,
    "S5"    => 499,
    "S7"    => 379,
    "S9"    => 219,
    "SM"    => 284,
    "SP"    => 269,
    "ST"    => 466,
    "SU"    => 478,
    "SV"    => 236,
    "SV/a"  => 180,
    "SV5"   => 45,
    "SV9"   => 40,
    "T2"    => 282,
    "T30"   => 301,
    "T31"   => 31,
    "T32"   => 48,
    "T33"   => 490,
    "T5"    => 232,
    "T7"    => 278,
    "T8"    => 22,
    "TA"    => 390,
    "TF"    => 242,
    "TG"    => 76,
    "TI"    => 308,
    "TI9"   => 37,
    "TJ"    => 406,
    "TK"    => 214,
    "TL"    => 408,
    "TN"    => 412,
    "TR"    => 420,
    "TT"    => 410,
    "TU"    => 428,
    "TY"    => 416,
    "TZ"    => 442,
    "UA"    => 54,
    "UA2"   => 126,
    "UA9"   => 15,
    "UK"    => 292,
    "UN"    => 130,
    "UR"    => 288,
    "V2"    => 94,
    "V3"    => 66,
    "V4"    => 249,
    "V5"    => 464,
    "V6"    => 173,
    "V7"    => 168,
    "V8"    => 345,
    "VE"    => 1,
    "VK"    => 150,
    "VK0H"  => 111,
    "VK0M"  => 153,
    "VK9C"  => 38,
    "VK9L"  => 147,
    "VK9M"  => 171,
    "VK9N"  => 189,
    "VK9W"  => 303,
    "VK9X"  => 35,
    "VP2E"  => 12,
    "VP2M"  => 96,
    "VP2V"  => 65,
    "VP5"   => 89,
    "VP6"   => 172,
    "VP6/d" => 513,
    "VP8"   => 141,
    "VP8/g" => 235,
    "VP8/h" => 241,
    "VP8/o" => 238,
    "VP8/s" => 240,
    "VP9"   => 64,
    "VQ9"   => 33,
    "VR"    => 321,
    "VU"    => 324,
    "VU4"   => 11,
    "VU7"   => 142,
    "XE"    => 50,
    "XF4"   => 204,
    "XT"    => 480,
    "XU"    => 312,
    "XW"    => 143,
    "XX9"   => 152,
    "XZ"    => 309,
    "YA"    => 3,
    "YB"    => 327,
    "YI"    => 333,
    "YJ"    => 158,
    "YK"    => 384,
    "YL"    => 145,
    "YN"    => 86,
    "YO"    => 275,
    "YS"    => 74,
    "YU"    => 296,
    "YV"    => 148,
    "YV0"   => 17,
    "Z2"    => 452,
    "Z3"    => 502,
    "Z6"    => 522,
    "Z8"    => 521,
    "ZA"    => 7,
    "ZB"    => 233,
    "ZC4"   => 283,
    "ZD7"   => 250,
    "ZD8"   => 205,
    "ZD9"   => 274,
    "ZF"    => 69,
    "ZK3"   => 270,
    "ZL"    => 170,
    "ZL7"   => 34,
    "ZL8"   => 133,
    "ZL9"   => 16,
    "ZP"    => 132,
    "ZS"    => 462,
    "ZS8"   => 201
);

my $args = '';

&DxccReadCty();

if ( !$ARGV[0] ) {
    print "$credits

Usage:  dxcc <callsign>\n\n";

    exit;
}
else {
    $args = "@ARGV";
}

{
    my @dxcc = &DxccGetRecord("\U$args");

    print "Callsign: \U$args\n\n";

    print "Main Prefix:    $dxcc[7]\n";
    print "Country Name:   $dxcc[0]\n";
    print "WAZ Zone:       $dxcc[1]\n";
    print "ITU Zone:       $dxcc[2]\n";
    print "Continent:      $dxcc[3]\n";
    print "Latitude:       $dxcc[4]\n";
    print "Longitude:      $dxcc[5]\n";
    print "UTC shift:      $dxcc[6]\n";
    print "Entity Code:    $dxcc[8]\n";

    print "\n";
}

###############################################################################
#
# &DxccWpx derives the Prefix following WPX rules from a call.
# The rules can be found at: http://www.cq-amateur-radio.com/wpxrules.html
# e.g. DJ1YFK/TF3  can be counted as both DJ1 or TF3, but this sub does
# not ask for that, always TF3 (= the attached prefix) is returned. If that is
# not want the OP wanted, it can still be modified manually.
#
###############################################################################

sub DxccWpx {
    my $prefix;
    my $a;
    my $b;
    my $c;
    my $call         = $_[0];
    my $lidadditions = "^QRP\$|^LGT\$";
    my $csadditions  = "(^P\$)|(^M{1,2}\$)|(^AM\$)|(^A\$)";

  # First check if the call is in the proper format, A/B/C where A and C
  # are optional (prefix of guest country and P, MM, AM etc) and B is the
  # callsign. Only letters, figures and "/" is accepted, no further check if the
  # callsign "makes sense".

   # Possible formats:
   # JJ1BDX: B = JJ1BDX
   # JJ1BDX/KL7: B = JJ1BDX / C = KL7
   # KL7/JJ1BDX/P : two slashes, easy to determine: A = KL7 / B = JJ1BDX / C = P

    if ( $call =~ /^((\d|[A-Z])+)$/ ) {
        $a = undef;
        $b = $1;
        $c = undef;
    }
    elsif ( $call =~ /^((\d|[A-Z])+)\/((\d|[A-Z])+)$/ ) {
        $a = undef;
        $b = $1;
        $c = $3;
    }
    elsif ( $call =~ /^((\d|[A-Z])+)\/((\d|[A-Z])+)\/((\d|[A-Z])+)$/ ) {
        $a = $1;
        $b = $3;
        $c = $5;
    }
    else {
        return '';
    }

    # Then how to distinguish KL7/JJ1BDX correctly?
    # If the first part is a known prefix, then let the part (in B) be A
    # and let the main callsign (in C) part be B
    # if not: HEURISTIC: if the first part length is smaller than second part,
    # the first part is highly likely to be a prefix

    if ( exists( $prefixes{$b} ) ) {
        $a = $b;
        $b = $c;
        $c = undef;
    }
    elsif ( length($b) < length($c) ) {
        $a = $b;
        $b = $c;
        $c = undef;
    }

    # Remove liddish callsign additions like /QRP and /LGT.
    if ( defined($c) && ( $c =~ /$lidadditions/ ) )
    {    # check if $b is a lid-addition
        $c = undef;
    }

    # Depending on these values we have to determine the prefix.
    # Following cases are possible:
    #
    # 1.    $a and $c undef --> only callsign, subcases
    # 1.1   $b contains a number -> everything from start to number
    # 1.2   $b contains no number -> first two letters plus 0
    # 2.    $a undef, subcases:
    # 2.1   $c is only a number -> $a with changed number
    # 2.2   $c is /P,/M,/MM,/AM -> 1.
    # 2.3   $c is something else and will be interpreted as a Prefix
    # 3.    $a is defined, will be taken as PFX, regardless of $c

    if ( ( not defined($a) ) && ( not defined($c) ) ) {    # Case 1
        if ( $b =~ /\d/ ) {    # Case 1.1, contains number
            $b =~ /(.+\d)[A-Z]*/;    # Prefix is all but the last
            $prefix = $1;            # Letters
        }
        else {                       # Case 1.2, no number
            $prefix = substr( $b, 0, 2 ) . "0";    # first two + 0
        }
    }
    elsif ( ( not defined($a) ) && ( defined($c) ) ) {    # Case 2, CALL/X
        if ( $c =~ /^(\d)$/ ) {                           # Case 2.1, number
            $b =~ /(.+\d)[A-Z]*/;                         # regular Prefix in $1
                # Here we need to find out how many digits there are in the
                # prefix, because for example A45XR/0 is A40. If there are 2
                # numbers, the first is not deleted. If course in exotic cases
                # like N66A/7 -> N7 this brings the wrong result of N67, but I
                # think that's rather irrelevant cos such calls rarely appear
                # and if they do, it's very unlikely for them to have a number
                # attached.   You can still edit it by hand anyway..

            if ( $1 =~ /^([A-Z]\d)\d$/ ) {    # e.g. A45   $c = 0
                $prefix = $1 . $c;            # ->   A40
            }
            else {                            # Otherwise cut all numbers
                $1 =~ /(.*[A-Z])\d+/;         # Prefix w/o number in $1
                $prefix = $1 . $c;
            }    # Add attached number
        }
        elsif ( $c =~ /$csadditions/ ) {
            $b =~ /(.+\d)[A-Z]*/;    # Known attachment -> like Case 1.1
            $prefix = $1;
        }
        elsif ( $c =~ /^\d\d+$/ ) {    # more than 2 numbers -> ignore
            $b =~ /(.+\d)[A-Z]*/;      # see above
            $prefix = $1;
        }
        else {                         # Must be a Prefix!
            if ( $c =~ /\d$/ ) {       # ends in number -> good prefix
                $prefix = $c;
            }
            else {                     # Add Zero at the end
                $prefix = $c . "0";
            }
        }
    }
    elsif ( defined $a ) {    # $a contains the prefix we want
        if ( $a =~ /\d$/ ) {    # ends in number -> good prefix
            $prefix = $a;
        }
        else {                  # add zero if no number
            $prefix = $a . "0";
        }
    }

    # In very rare cases (right now I can only think of KH5K and KH7K and FRxG/T
    # etc), the prefix is wrong, for example KH5K/DJ1YFK would be KH5K0. In this
    # case, the superfluous part will be cropped.
    if ( $prefix =~ /(\w+\d)[A-Z]+\d/ ) {
        $prefix = $1;
    }

    # debug
    # print "wpx prefix: $prefix\n";
    return $prefix;
}    # DxccWpx ends here

##############################################################################
#
# &DxccGetRecord determines the DXCC country of a given callsign
# using the cty.dat country file by
# Jim Reisert, AD1C (http://country-files.com/).
#
# An example entry of the file looks like this:
#
# Portugal:                 14:  37:  EU:   39.50:     8.00:     0.0:  CT:
#    CQ,CR,CS,CT,=CR5FB/LH,=CS2HNI/LH,=CS5E/LH,=CT/DJ5AA/LH,=CT1BWW/LH,=CT1GFK/LH,=CT1GPQ/LGT,
#    =CT7/ON4LO/LH,=CT7/ON7RU/LH;
#
# The first line contains the name of the country, WAZ, ITU zones, continent,
# latitude, longitude, UTC difference and main Prefix, the second line contains
# possible Prefixes and/or whole callsigns that fit for the country, sometimes
# followed by zones in brackets (WAZ in (), ITU in []).
#
# First this sub scans the fullcall list for exact matches, which handles the
# special cases of the callsign.
# Then the callsign (or what appears to be the part determining the DXCC if
# there is a "/" in the callsign) are checked against
# the list of known prefixes, and the best (longest) matching one
# is taken as the result.
#
# This sub checks the callsign against this list and the DXCC in which
# the best match (longest matching characters) appear.
# This is needed because for example
# the CTY file specifies only "D" for Germany, "D4" for Cape Verde.
# Also some "unusual" callsigns which appear to be in wrong DXCCs will be
# assigned properly this way, for example the Antarctic callsigns.
#
# The return value is an array contains the following elements:
# ("Country Name", "WAZ", "ITU", "Continent",
#   "latitude", "longitude", "UTC difference", "DXCC", "Entity Code").
#
###############################################################################

sub DxccGetRecord {
    my $testcall    = $_[0];
    my $matchchars  = 0;
    my $matchprefix = '';
    my $test;
    my $letter = '';
    my @mydxcc = qw/Unknown 0 0 0 0 0 0 ? 0/;

    # debug
    #print "testcall: $testcall\n";

    if ( not( $testcall =~ /^((\d|[A-Z]|\/)+)$/ ) ) {

        # debug
        #print "callsign not legit\n";
        return @mydxcc;
    }

    if ( $fullcalls{$testcall} ) {    # direct match with a fullcall
            # do nothing! don't try to resolve WPX, it's a full
            # call and will match correctly even if it contains a /
        @mydxcc = @{ $fullcalls{$testcall} };

        # debug
        #print "testcall is a fullcall\n";
        return @mydxcc;
    }

    # rewrite testcall with local rules

    if ( $testcall =~ /(^OH\/)|(\/OH[1-9]?$)/ ) {    # non-Aland prefix!
        $testcall = "OH";    # make callsign OH = finland
    }
    elsif ( $testcall =~ /\w\/\w/ ) {    # check if the callsign has a "/"
        $testcall =
          &DxccWpx($testcall) . "AA";    # use the wpx prefix instead, which may
                                         # intentionally be wrong, see &wpx!
    }

    # debug
    #print "testcall is rewritten as: $testcall\n";

    # pick the top letter
    $letter = substr( $testcall, 0, 1 );

    # Test for all the prefixes
    for my $testprefix ( keys %prefixes ) {
        my $len = length($testprefix);
        if ( $letter ne substr( $testprefix, 0, 1 ) ) {    # gains 20% speed
            next;
        }
        $testprefix =~ /^([A-Z0-9\/]+)/;
        $len = length($1);
        if ( substr( $testcall, 0, $len ) eq substr( $testprefix, 0, $len )
            && ( $matchchars <= $len ) )
        {
            $matchchars  = $len;
            $matchprefix = $testprefix;

            # debug
            #print "matched: $matchprefix length: $matchchars\n";
        }
    }

    if ( exists( $prefixes{$matchprefix} ) ) {
        @mydxcc = @{ $prefixes{$matchprefix} };
    }

 # cty.dat has special entries for WAE countries which are not separate DXCC
 # countries. Those start with a "*", for example *TA1. Those have to be changed
 # to the proper DXCC. Since there are opnly a few of them, it is hardcoded in
 # here.

    if ( $mydxcc[7] =~ /^\*/ ) {    # WAE country!
        if ( $mydxcc[7] eq '*TA1' )  { $mydxcc[7] = "TA" }   # Turkey
        if ( $mydxcc[7] eq '*4U1V' ) { $mydxcc[7] = "OE" }   # 4U1VIC is in OE..
        if ( $mydxcc[7] eq '*GM/s' ) { $mydxcc[7] = "GM" }   # Shetlands
        if ( $mydxcc[7] eq '*IG9' )  { $mydxcc[7] = "I" }    # African Italy
        if ( $mydxcc[7] eq '*IT9' )  { $mydxcc[7] = "I" }    # Sicily
        if ( $mydxcc[7] eq '*JW/b' ) { $mydxcc[7] = "JW" }   # Bear Island
    }

    # include "/" in the Main Prefix

    return @mydxcc;

}    # DxccGetRecord ends here

##############################################################################
#
# DxccReadCty reads and parses the cty.dat, residing in the following
# diretories, searching by the following sequence:
#
# * /usr/share/dxcc/cty.dat
# * /usr/local/share/dxcc/cty.dat
# * <The path where the dxcc script resides>/cty.dat
#
# This sub initializes the two hashes used by &DxccGetRecord:
#
# * %fullcalls, where the keys are the full callsigns (withOUT the first =),
#   and the values are the arrays of DxccGetRecord returning values; and
# * %prefixes, where the keys are the prefixes,
#   and the values are the arrays of DxccGetRecord returning values.
#
##############################################################################

sub DxccReadCty {

    # Read cty.dat from AD1C in
    # /usr/share/dxcc, /usr/local/share/dxcc,
    # and where the script resides.

    my $filename;

    if ( -e "/usr/share/dxcc/cty.dat" ) {
        $filename = "/usr/share/dxcc/cty.dat";
    }
    elsif ( -e "/usr/local/share/dxcc/cty.dat" ) {
        $filename = "/usr/local/share/dxcc/cty.dat";
    }
    elsif ( -e "$scriptdirname/cty.dat" ) {
        $filename = "$scriptdirname/cty.dat";
    }
    else {
        die("Unable to find cty.dat\n");
    }

    open CTY, $filename;

    my @lastdxcc;

    while ( my $line = <CTY> ) {

        if ( substr( $line, 0, 1 ) ne ' ' ) {    # New DXCC
            $line =~ /\s+([*A-Za-z0-9\/]+):\s+$/;
            $line =~ s/\s{2,}//g;

            # Save the current DXCC entry for the Main Prefix
            @lastdxcc = split( /:/, $line );
            my $mainprefix = $lastdxcc[7];

            # Rewrite WAE-only prefixes to DXCC prefixes
            if ( $mainprefix =~ /^\*/ ) {    # WAE country!
                if ( $mainprefix eq '*TA1' ) { $mainprefix = "TA" }    # Turkey
                if ( $mainprefix eq '*4U1V' ) {
                    $mainprefix = "OE";
                }    # 4U1VIC is in OE..
                if ( $mainprefix eq '*GM/s' ) { $mainprefix = "GM" } # Shetlands
                if ( $mainprefix eq '*IG9' ) {
                    $mainprefix = "I";
                }    # African Italy
                if ( $mainprefix eq '*IT9' ) { $mainprefix = "I" }    # Sicily
                if ( $mainprefix eq '*JW/b' ) {
                    $mainprefix = "JW";
                }    # Bear Island
            }

            # include "/" in the Main Prefix
            push( @lastdxcc, $prefix_to_entitycode{$mainprefix} );
        }
        else {    # prefix-line
            $line =~ s/\s+//g;

            # split a line into words
            # (fullcalls or prefixes with zone amendment data)
            my @words = split( /,|;/, $line );

            for my $word (@words) {

                # debug
                #print "word: $word\n";

                # dxccval may be modified
                my @dxccval = @lastdxcc;

                if ( $word =~ /\((\d+)\)/ ) {    # CQ-Zone in ()
                    $dxccval[1] = $1;

                    # debug
                    #print "new cq zone: $dxccval[1]\n";
                }
                if ( $word =~ /\[(\d+)\]/ ) {    # ITU-Zone in []
                    $dxccval[2] = $1;

                    # debug
                    #print "new itu zone: $dxccval[2]\n";
                }
                if ( $word =~ /=?([A-Z0-9\/]+)/ ) {

                    # convert value types
                    $dxccval[1] = $dxccval[1] * 1;
                    $dxccval[2] = $dxccval[2] * 1;
                    $dxccval[4] = $dxccval[4] * 1.0;
                    $dxccval[5] = $dxccval[5] * 1.0;
                    $dxccval[6] = $dxccval[6] * 1.0;

                    # callsign: fullcall or prefix
                    my $callsign = $1;
                    if ( substr( $word, 0, 1 ) eq '=' ) {

                        # fullcall
                        $fullcalls{$callsign} = [@dxccval];

                        # debug
                        #print "new fullcall $callsign\n elements:";
                        #for my $i ( @{ $fullcalls{$callsign} } ) {
                        #    print " $i, ";
                        #}
                        #print "\n";
                    }
                    else {
                        # "normal" prefix
                        $prefixes{$callsign} = [@dxccval];

                        # debug
                        #print "new prefix $callsign\n elements:";
                        #for my $i ( @{ $prefixes{$callsign} } ) {
                        #    print " $i, ";
                        #}
                        #print "\n";
                    }
                }
            }
        }
    }
    close CTY;

}    # ends DxccReadCty

exit;
